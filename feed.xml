<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://hyunhyun.github.io/</id><title>HyunHyun's BLOG</title><subtitle>hyun's software talk talk</subtitle> <updated>2023-07-21T15:42:48+09:00</updated> <author> <name>Hyun</name> <uri>https://hyunhyun.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://hyunhyun.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://hyunhyun.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2023 Hyun </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>AWS KMS 이용 암호화</title><link href="https://hyunhyun.github.io/posts/AWS-KMS-%EC%9D%B4%EC%9A%A9-%EC%95%94%ED%98%B8%ED%99%94/" rel="alternate" type="text/html" title="AWS KMS 이용 암호화" /><published>2023-07-21T00:00:00+09:00</published> <updated>2023-07-21T15:42:08+09:00</updated> <id>https://hyunhyun.github.io/posts/AWS-KMS-%EC%9D%B4%EC%9A%A9-%EC%95%94%ED%98%B8%ED%99%94/</id> <content src="https://hyunhyun.github.io/posts/AWS-KMS-%EC%9D%B4%EC%9A%A9-%EC%95%94%ED%98%B8%ED%99%94/" /> <author> <name>Hyun</name> </author> <category term="AWS" /> <summary> 고객관리형키 KMS 키로 암호화 적용 iam 사용자에 보안자격증명 탭에서 액세스 키 만들기를 선택한다. aws cli 타입을 선택해서 하겠다. secret_access_key는 바로 별도로 저장해주어야한다. 이후에 조회가 불가하다. EC2에 aws cli를 통해 configure정보를 아래처럼 등록해준다. EC2에 AWSKeyManagementServicePowerUser를 추가해줍니다. 소스에 build.gradle에 아래와 같은 dependency를 추가한다. //aws implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.1000') compileOnly group: 'com.amazonaws', name: 'aw... </summary> </entry> <entry><title>Code Build 사용하기</title><link href="https://hyunhyun.github.io/posts/Code-Build-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="Code Build 사용하기" /><published>2023-07-20T00:00:00+09:00</published> <updated>2023-07-20T18:26:39+09:00</updated> <id>https://hyunhyun.github.io/posts/Code-Build-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</id> <content src="https://hyunhyun.github.io/posts/Code-Build-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/" /> <author> <name>Hyun</name> </author> <category term="AWS" /> <summary> AWS code pipeline 활용하기 위해 code build 빌드 프로젝트 생성 aws code pipeline을 활용하여 cicd를 구축하기 위한 단계로 소스 리파지토리는 aws code commit 사용 build 단계에서는 code build를 사용 deploy 단계에서는 code deploy 사용 CodeBuild에서 빌드 프로젝트를 생성해준다 빌드할 소스의 위치를 전에 생성한 git commit으로 선택후 repository, branch 을 선택해준다 환경이 운영체제는 해당 사항에 맞게 선택해주고 corretto11을 선택해 주었다. 기존 role이 없다면 새 서비스 역할을 선택해 주면 codebuild에 맞는 역할이 생성된다 아래와 같이 codebuild에서 ... </summary> </entry> <entry><title>AWS Code pipeline</title><link href="https://hyunhyun.github.io/posts/AWS-Code-pipeline-%EA%B5%AC%EC%B6%95/" rel="alternate" type="text/html" title="AWS Code pipeline" /><published>2023-07-20T00:00:00+09:00</published> <updated>2023-07-20T00:00:00+09:00</updated> <id>https://hyunhyun.github.io/posts/AWS-Code-pipeline-%EA%B5%AC%EC%B6%95/</id> <content src="https://hyunhyun.github.io/posts/AWS-Code-pipeline-%EA%B5%AC%EC%B6%95/" /> <author> <name>Hyun</name> </author> <category term="AWS" /> <summary> AWS code pipeline cicd 구축하기 이전 게시글에서 aws code commit, code build, code deploy를 만들었다. 이들을 연결하여 pipeline을 생성하여 cicd를 구축해보자. 소스 공급자로 이전에 code commit에 저장된 리파지토리를 선택한다. 빌드 스테이지에서는 이전에 생성한 code build project를 선택한다. 배포 스테이지에서는 이전에 생성한 code deploy application을 선택한다. 이후 code commit 해당 리파지토리에 push가 일어나면 자동으로 source 단계부터 차례로 이전 단계가 성공적으로 수행되면 그다음 단계가 수행된다. @RestController public class TestContr... </summary> </entry> <entry><title>AWS Code deploy</title><link href="https://hyunhyun.github.io/posts/AWS-Code-deploy/" rel="alternate" type="text/html" title="AWS Code deploy" /><published>2023-07-20T00:00:00+09:00</published> <updated>2023-07-20T18:26:39+09:00</updated> <id>https://hyunhyun.github.io/posts/AWS-Code-deploy/</id> <content src="https://hyunhyun.github.io/posts/AWS-Code-deploy/" /> <author> <name>Hyun</name> </author> <category term="AWS" /> <summary> AWS code deploy code deploy를 생성하여 배포하는 과정을 만들어보겠다. code deploy에 들어가서 code deploy application을 생성한다. iam role 로 아래와 같이 AWSCodeDeployRole 권한이 있는 role을 생성한다. 아래와 같이 배포 그룹을 생성한다. 배포에 추가할 인스턴스 조합으로 EC2 인스턴스를 선택한다. 그리고 아래에서 적절한 생선한 ec2 중 적절한 ec2를 선택한다. 로드밸런스는 선택하지 않고 단일 ec2에만 적용할 것이니 로드 밸런싱 활성화는 해제해 준다. 소스 코드에 appspec.yml, 배포 script 추가 루트 폴더 바로 아래에 appspec.yml 도 추가한다 #appspec.yml version... </summary> </entry> <entry><title>AWS Code Commit 사용하기</title><link href="https://hyunhyun.github.io/posts/AWS-Code-Commit-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="AWS Code Commit 사용하기" /><published>2023-07-18T00:00:00+09:00</published> <updated>2023-07-18T00:00:00+09:00</updated> <id>https://hyunhyun.github.io/posts/AWS-Code-Commit-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</id> <content src="https://hyunhyun.github.io/posts/AWS-Code-Commit-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/" /> <author> <name>Hyun</name> </author> <category term="AWS" /> <summary> Repository로 AWS Code Commit 사용하기 code commit 에서 리파지토리를 새로 생성해준다. iam 메뉴에 가서 사용자를 새로 생성한다. 사용자의 권한에 AWSCodeCommitFullAccess권한을 추가해준다. 사용자의 보안자격 증명 탭에 들어가면 아래에 AWS CodeCommit에 대한 HTTPS Git 자격 증명에 아래와 같이 자격 증명을 하나 생성한다. 이때 암호는 따로 저장해 둔다. 그리고 기존의 git 사용법 대로 아래 명령어 순서대로 수행하여 준다. git init git add . git commit -m "commit message" git remote add origin https://git-codecommit.ap-northeast-2.am... </summary> </entry> </feed>
