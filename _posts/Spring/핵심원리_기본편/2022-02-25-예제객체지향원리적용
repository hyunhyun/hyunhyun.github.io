# 섹션2 - 스프링 핵심 원리 이해1 - 예제 만들기
요구사항:  주문, 고객 이 있고 고객의 등급이 vip인 경우에 할인정책을 적용한다
할인정책은 변경가능하다, 어떤 db를 사용할지 정하지 못했다
[image:30BDD608-EB94-48F5-BD9C-95D83D19734E-552-00000003E5B1DE62/스크린샷 2022-02-25 오전 11.06.11.png]

[image:306801DE-CA56-44F5-8721-923AB187F515-552-00000003875FC11A/스크린샷 2022-02-25 오전 11.05.10.png]

# 섹션 3 - 스프링 핵심 원리 이해2 - 객체 지향 원리 적용
Junit5을 이용하여 테스트코드 작성
@Test를 이용하면 main함수가 아니더라도 코드 수행 가능
@BeforeEach는 각 테스트 호출전에 각각 수행됨
@DisplayName(“테스트 이름”)      -Junit5 부터

AppConfig라는 설정하는 클래스를 별도로 만들어
구현 객체 생성, 연결하는 별도 설정의 클래스
-> DIP, 역할 분리 만족됨
-> DI 의존성 주입해주는 역할

IoC, DI 그리고 컨테이너
*IoC*: 제어의 역전 -프로그름 제어흐름을 외부에서 관리
(기존 클라이언트 구현객체가 스스로 필요한 서버 구현 객체를 생성하고,연결사고 실행했음)

프레임워크 vs 라이브러리
프레임워크 : 내가 작성한 코드를 제어하고 대신 실행(Junit)
라이브러리 : 내가 직접 제어하고 흐름을 담당하면 라이브러리

*DI 의존관계 주입*
애플리케이션 실행시점(런타임) 에 외부에서 실제 구현 객체를 생성하고 클라이언트에 전달해서 서버와 클라이언트 실제 의존관계 연결하게 되는 것

여기에서 AppConfig가 DI 역할을 하는 *DI 컨테이너*

스프링으로 전환하기
AppConfig 위에 @Configuration을 설정 -> 스프링이 해당 파일구성정보로 사용 인식 (이후 스프링에서 CGLIB를 통해서 바이트 조작하여 이를 상속하는 인스턴스를 만듬)

@Bean으로 설정하면 스프링 빈으로 스프링 컨테이너에 등록함
(빈이름은 메소드 명 사용 앞글자 소문자로 변경하여) -빈 이름은 전부 달라야함

AnnotationConfigApplicationContext(AppConfig.class)
파라미터는 이외 bean으로 등록할 객체들 넣을수있음

> 출처 : 인프런 강의 <br>
>  스프링 핵심 원리 -기본편 <김영한>